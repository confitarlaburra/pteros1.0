#include "../src/stdheader.h"
//#include "../src/MSD_task.h"
using namespace std;
using namespace pteros;
using namespace Eigen;



int main(int argc, char** argv){
  try {
    // Represents built-in and custom command line options
    Options options;
    parse_command_line(argc,argv, options);
    // Init trajectory reader with options
    //Trajectory_reader engine(options);
    // Init pointer to task
    //MSD_cyl* msdCyl = new MSD_cyl(options);
    // Read system from reference pdb file
    System  system (options("f").as_strings()[0]);
    System  system2 (options("f").as_strings()[1]);
    //set reference selection for fitting
    Selection fit(system,options("refSel").as_string());
    Selection fit2(system2,options("refSel").as_string());
    Affine3f trans = fit_transform(fit,fit2);
    //Affine3f trans;
    Selection(system2,"all").apply_transform(trans);
    system2.select("all").write("Bfit.pdb");
    //msdCyl->set_selFitRef(fit);
    // add task to trajectory reader (engine)
    //engine.add_task(msdCyl);
    //engine.run();
  } catch(const Pteros_error& e) {
    cout<<e.what()<<endl;
  }
}





